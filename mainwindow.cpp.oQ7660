#include "mainwindow.h"
#include "ui_mainwindow.h"

#define DEFAULT_BAUDRATE    "115200"
#define DEFAULT_DATABIT     8
#define DEFAULT_CHECKBIT    0
#define DEFAULT_STOPBIT     1

/*
struct ir_button_slot_t ir_button_List[] = {
    {BUTTON_POWER,NULL,"Power",NULL},
    {BUTTON_EJECT,NULL,"Eject",NULL},
    {BUTTON_ENTER,NULL,"Enter",NULL},
};
*/

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    portBox = new QComboBox;
    ui->mainToolBar->insertWidget(ui->actionOpenUart,portBox);
    on_actionFresh_triggered();
    portSetting.port_name = portBox->currentText();

    QDir *dir = new QDir(QDir::currentPath());
    if(!dir->exists("KeyMap"))
    {
        qDebug() << "create key map dir\n";
        dir->mkdir("KeyMaps");
    }
    else
    {
       qDebug() << "key map dir is exist\n";
    }

    keyMapDirPath = QDir::currentPath().append("/KeyMaps");
    qDebug() << "keyMapDirPath is " << keyMapDirPath;

    ui->AgingTestSubWindow->showMaximized();
    //ui->leStackedWidget->setCurrentIndex(0);
    ui->atStackedWidget->setCurrentIndex(0);

    QString baudrate = DEFAULT_BAUDRATE;
    portSetting.baudRate = baudrate.toInt();
    portSetting.checkBit = DEFAULT_CHECKBIT;
    portSetting.dataBit = DEFAULT_DATABIT;
    portSetting.stopBit = DEFAULT_STOPBIT;

    ir_button_List_init();
    ir_button_Slot_connect();
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_actionAbout_IRC_triggered()
{
    AboutIrc *diaglog = new AboutIrc;
    diaglog->setWindowTitle("IRC Tool Info");
    //diaglog->show();//非模态
    diaglog->exec();//模态
}

void MainWindow::on_actionOpenUart_triggered()
{
    QList<QSerialPortInfo> portList = QSerialPortInfo::availablePorts();
    serial.setPort(portList.at(portBox->currentIndex()));
    serial.setPortName(portBox->currentText());

    if(serial.isOpen())
    {
        serial.close();
        ui->actionOpenUart->setIcon(QIcon(":/new/icon/resource-icon/ball_yellow.png"));
    }
    else
    {
        if(serial.open(QIODevice::ReadWrite))
        {
            //serial.setBaudRate(ui->baudrateText->text().toInt());
            ui->actionOpenUart->setIcon(QIcon(":/new/icon/resource-icon/ball_green.png"));
        }
        else
            QMessageBox::information(this,"Warning","Open " + serial.portName()+ "fail:" + serial.error());
    }

}

void MainWindow::on_actionFresh_triggered()
{
    QList<QSerialPortInfo> portList = QSerialPortInfo::availablePorts();
    qDebug() << "how many ports:" << portList.size();
    int availabelPortCnt = 0;
    if(portList.size() > 0)
    {
        QSerialPort serialtmp;
        foreach(const QSerialPortInfo &info, QSerialPortInfo::availablePorts())
        {

            serialtmp.setPort(info);
            if(serialtmp.open(QIODevice::ReadWrite))
            {
                portBox->addItem(serialtmp.portName());
                availabelPortCnt++;
                //qDebug << serial.portName();
                serialtmp.close();
            }
        }
        if(availabelPortCnt <=0 ){
             QMessageBox::information(this,"Warning","No available ComPort!");
        }
        else
        {
            serialtmp.setPort(portList.at(0));
            if(serialtmp.isOpen())
            {
                ui->actionOpenUart->setIcon(QIcon(":/new/icon/resource-icon/ball_green.png"));
            }
            else
                ui->actionOpenUart->setIcon(QIcon(":/new/icon/resource-icon/ball_yellow.png"));
        }
        //serial = serialtmp;
    }
    else
        QMessageBox::information(this,"Warning","No available ComPort!");

    portBox->setCurrentText(this->portSetting.port_name);

}

void MainWindow::on_actionUpgrade_triggered()
{
    ui->UpgradeSubWindow->showMaximized();
}

void MainWindow::on_actionLearningKey_triggered()
{
    //QMessageBox::information(this,"Guide","Please choose a button from a panel first,then press the button on remote control,wait until key value shows on the edidtbox");

    ui->learningKeyGroup->setDisabled(false);
    ui->learningKeyGroup->show();

    //isAutotestState = 0;
    isLearingkeyState = 1;
    ui->LearningKeySubWindow->showMaximized();
}

void MainWindow::on_actionLoadKeyMap_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this,"Open File",QDir::currentPath());
    if(fileName.isEmpty())
    {
        QMessageBox::information(this,"Error","Please select a file");
        return;
    }
    QFile *file = new QFile; //(QtCore)核心模块,需要手动释放
    file->setFileName(fileName);
    bool ok = file->open(QIODevice::ReadOnly);//以只读模式打开
    if(ok)
    {
      QTextStream in(file);  //文件与文本流相关联
     // ui->atScriptlistWidget->setText(in.readAll());//read all context from the file
      file->close();
      delete file;
    }
    else
    {
        QMessageBox::information(this,"Error","File Open Error" + file->errorString()); //显示打开文件的错误原因
        return;
    }
}

void MainWindow::on_actionPort_Setting_triggered()
{
    fport = new ComPort_Setting(this,&(this->portSetting));
    this->connect(fport,SIGNAL(sendsignal()),this,SLOT(returnPortSetting()));
    fport->portSetting = &(this->portSetting);
    fport->setWindowTitle("Port Setting");
    fport->show();//非模态
    //diaglog->exec();//模态
}
void MainWindow::returnPortSetting()
{
    portBox->setCurrentText(this->portSetting.port_name);

    delete fport;
}

void MainWindow::on_actionAgingTest_triggered()
{
    //isAutotestState = 1;
    isLearingkeyState = 0;
    ui->AgingTestSubWindow->showMaximized();
}

void MainWindow::ir_button_List_init()
{


}
void MainWindow::ir_button_Slot_connect()
{
/*---------------------lianlian add for LearingKey----------------*/
    QObject::connect(ui->leCustomizeButton,SIGNAL(clicked()),this,SLOT(leCustomizeButton_slot()));
    QObject::connect(ui->leReturnButton,SIGNAL(clicked()),this,SLOT(leReturnButton_slot()));

    QObject::connect(ui->lePower,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leHome,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leEject,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leEnter,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));

    QObject::connect(ui->leRed,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leGreen,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leYellow,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leBlue,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));

    QObject::connect(ui->leUp,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDown,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leRight,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leLeft,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));

    QObject::connect(ui->leChanneldown,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leChannelup,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leVolumdown,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leVolumup,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));

    QObject::connect(ui->leDigital_0,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_1,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_2,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_3,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_4,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_5,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_6,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_7,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_8,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDigital_9,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));

    QObject::connect(ui->lePlay,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->lePause,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leStop,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leFastforward,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leFastReverse,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leNext,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->lePrev,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leAudio,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leAutoMute,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leDisplay,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leOption,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leSubtitle,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));
    QObject::connect(ui->leRecall,SIGNAL(clicked()),this,SLOT(leIrPanel_slot()));

    QObject::connect(ui->leStartRecordBut,SIGNAL(clicked()),this,SLOT(leStartRecordButton_slot()));
    QObject::connect(ui->leAddToListButton,SIGNAL(clicked()),this,SLOT(leAddToListButton_slot()));
    QObject::connect(ui->leRemoveFromListBut,SIGNAL(clicked()),this,SLOT(leRemoveFromListButton_slot()));
    QObject::connect(ui->leSaveKeymapBut,SIGNAL(clicked()),this,SLOT(leSaveKeymapButton_slot()));
    QObject::connect(ui->leClearButton,SIGNAL(clicked()),this,SLOT(leClearButton_slot()));
    QObject::connect(ui->leRealTimeTestBut,SIGNAL(clicked()),this,SLOT(leRealTimeTestButton_slot()));

    /*---------------------lianlian add for AgingTest----------------*/

        QObject::connect(ui->atPower,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atHome,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atEject,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atEnter,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));

        QObject::connect(ui->atRed,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atGreen,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atYellow,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atBlue,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));

        QObject::connect(ui->atUp,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDown,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atRight,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atLeft,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));

        QObject::connect(ui->atChanneldown,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atChannelup,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atVolumdown,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atVolumup,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));

        QObject::connect(ui->atDigital_0,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_1,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_2,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_3,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_4,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_5,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_6,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_7,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_8,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDigital_9,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));

        QObject::connect(ui->atPlay,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atPause,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atStop,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->leFastforward,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atFastReverse,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atNext,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atPrev,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atAudio,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atAutoMute,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atDisplay,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atOption,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atSubtitle,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));
        QObject::connect(ui->atRecall,SIGNAL(clicked()),this,SLOT(atIrPanel_slot()));

        QObject::connect(ui->atLoadscriptBut,SIGNAL(clicked()),this,SLOT(atLoadscriptBut_slot()));
        QObject::connect(ui->atAddButton,SIGNAL(clicked()),this,SLOT(atAddButton_slot()));
        QObject::connect(ui->atRemoveButton,SIGNAL(clicked()),this,SLOT(atRemoveButton_slot()));
        QObject::connect(ui->atSaveButton,SIGNAL(clicked()),this,SLOT(atSaveButton_slot()));
        QObject::connect(ui->atClear,SIGNAL(clicked()),this,SLOT(atClear_slot()));
        QObject::connect(ui->atRealTimeSendButton,SIGNAL(clicked()),this,SLOT(atRealTimeSendButton_slot()));
        QObject::connect(ui->atRunButton,SIGNAL(clicked()),this,SLOT(atRunButton_slot()));
        QObject::connect(ui->atStop,SIGNAL(clicked()),this,SLOT(atStop_slot()));

        QObject::connect(ui->atCustomizeButton,SIGNAL(clicked()),this,SLOT(atCustomizeButton_slot()));
        QObject::connect(ui->atReturnButton,SIGNAL(clicked()),this,SLOT(atReturnButton_slot()));
}

/*---------------------lianlian add for AgingTest----------------*/

void MainWindow::atCustomizeButton_slot()
{
    ui->atStackedWidget->setCurrentIndex(1);

}

void MainWindow::atReturnButton_slot()
{
    ui->atStackedWidget->setCurrentIndex(0);

}
void MainWindow::atAddButton_slot()
{


    if (ui->atScriptlistWidget->currentIndex().row() < 0)
        return;

//step1:add to listWidget
    QString str = ui->atButtonText->text();
    str.append("---");
    str.append(ui->atDelayText->text());
    QListWidgetItem *item = new QListWidgetItem(str,ui->leKeymaplistWidget);
    ui->leKeymaplistWidget->addItem(item);
    //qDebug() << "add:leKeymaplistWidget total count is " << ui->leKeymaplistWidget->count();

//step2:add to cmd List
    IR_item_t IR_item;
    IR_item.is_valid = 1;
    IR_item.is_random= false;
    IR_item.delay_time = ui->atDelayText->text().toUInt();

    IR_item.IR_type = ui->atCustomerCombox->currentIndex();
    //if (IR_item.IR_type == IR_TYPE_SONY_SIRCS)
   // {
        IR_item.IR_CMD.IR_SIRCS = ui->atScriptlistWidget->currentIndex().row();
    //}
    IR_items.append(&IR_item);
    //add_to_list(IR_item);
}

void MainWindow::atRemoveButton_slot()
{
    if (ui->atScriptlistWidget->count())
    {
        int index = ui->atScriptlistWidget->currentRow();

        if (index >= 0)
        {
            ui->atScriptlistWidget->removeItemWidget(ui->atScriptlistWidget->takeItem(index));
            IR_items.removeAt(index);
        }
    }
    else
    {
        atClear_slot();
    }
}

void MainWindow::atSaveButton_slot()
{

}

void MainWindow::atClear_slot()
{
  ui->atScriptlistWidget->clear();
  IR_items.clear();
}


int timer_index;
void MainWindow::set_cmd_list_handle()
{
    uint8_t buf[255];

    struct frame_t *frame = (struct frame_t *)buf;

    frame->data_len = sizeof(struct frame_t);
    frame->header = FRAME_HEADER;
    frame->msg = SET_CMD_LIST;
    frame->index = timer_index;
    frame->IR_item = IR_items.at(timer_index);
    frame->crc32 = CRC32Software(buf, frame->data_len - 4);

    timer_index++;
    if (timer_index >= IR_items.size())
    {
        set_cmd_list_timer.stop();
    }

    serial.write((char*)buf, frame->data_len);
}

void MainWindow::clear_cmd_list_handle()
{
    uint8_t buf[255];

    struct frame_t *frame = (struct frame_t *)buf;

    frame->data_len = sizeof(struct frame_t);
    frame->header = FRAME_HEADER;
    frame->msg = CLEAR_CMD_LIST;

    frame->crc32 = CRC32Software(buf, frame->data_len - 4);

    SP.write((char*)buf, frame->data_len);
}

void MainWindow::atRunButton_slot()
{
    if (!serial.isOpen())
    {
        QMessageBox::critical(this, tr("send data error"), "please open serial port first");
        return;
    }

    clear_cmd_list_handle();

    set_cmd_list_timer.stop();
    timer_index = 0;
    set_cmd_list_timer.start(50);
}

void MainWindow::atStop_slot()
{

}
/*---------------------lianlian add for LearningKey----------------*/

void MainWindow::leCustomizeButton_slot()
{
    //ui->leStackedWidget->setCurrentIndex(1);
    //QListWidgetItem *item1 = new QListWidgetItem();

//自定义的ListWidgetItem中.
    //QWidget * myWidget = MyListItem();
    QWidget *myWidget = new QWidget;
    //listwidget = new QListWidget(this);
    QHBoxLayout *layout = new QHBoxLayout(myWidget);

    QCheckBox *check = new QCheckBox;
    QLineEdit *butText = new QLineEdit;
    QLineEdit *keyValue = new QLineEdit;

    //check->setext("");

    butText->setPlaceholderText("Input Button Name");
    keyValue->setPlaceholderText("Key Value");
    keyValue->setDisabled(true);

    layout->addWidget(check);
    layout->addWidget(butText);
    layout->addWidget(keyValue);

    myWidget->setLayout(layout);

    QListWidgetItem *aItem = new QListWidgetItem(ui->leCustomizeKeyListWidget);
    aItem->setSizeHint(QSize(0,50));
    ui->leCustomizeKeyListWidget->addItem(aItem);
    ui->leCustomizeKeyListWidget->setItemWidget(aItem,myWidget);

}

void MainWindow::leReturnButton_slot()
{
    //ui->leStackedWidget->setCurrentIndex(0);

}


void MainWindow::leIrPanel_slot()
{
    QPushButton* btn = dynamic_cast<QPushButton*>(sender());
    ui->leButtonText->setText(btn->toolTip());
    qDebug() << btn->toolTip() << "is clicked in learning key ir panel\n";
    //QMessageBox::information(this,"info","Learning Power button is clicked\n");
}

void MainWindow::leRealTimeTestButton_slot()
{
    if(!serial.isOpen())
    {
        QMessageBox::warning(this,"Send Error","Please Open Serial Port First!\n");
        return;
    }
    IR_SIRCS_t ir;
    QString str = ui->leKeymaplistWidget->currentItem()->text();
    QStringList list1 = str.split(',');

    qDebug() << "isLearningKey : " << list1.at(0);
    qDebug() << "key name : " << list1.at(1);
    qDebug() << "key value : " << list1.at(2);

    ir.isLearningKey = list1.at(0).toInt();
    QByteArray name = list1.at(1).toLatin1();
    ir.name = name.data();
    if(ir.isLearningKey)
    {
        ir.keyValue = list1.at(2);
    }

    qDebug() << "isLearningKey : " << ir.isLearningKey;
    qDebug() << "key name : " << ir.name;
    qDebug() << "key value : " << ir.keyValue;

    //serial.setBaudRate(QSerialPort::Baud115200);
    //serial.setParity(QSerialPort::NoParity);
    //serial.setDataBits(QSerialPort::Data8);
    //serial.setStopBits(QSerialPort::OneStop);
    //serial.setFlowControl(QSerialPort::NoFlowControl);
    //serial.clearError();
    //serial.clear();

    uint8_t buf[255];

    struct frame_t *frame = (struct frame_t *)buf;

    frame->data_len = sizeof(struct frame_t);
    frame->header = FRAME_HEADER;
    frame->msg = REAL_TIME_SEND;
    frame->IR_item.is_valid = 1;
    frame->IR_item.is_random = true;
    frame->IR_item.delay_time = 1000;
    //frame->IR_item.IR_type = LearningKey;
    frame->IR_item.IR_CMD.IR_SIRCS = ir;//IR_SIRCS_commands[ui->CB_IR_device->currentIndex()][ui->LV_command_list->currentIndex().row()];

    frame->crc32 = CRC32Software(buf, frame->data_len - 4);

    serial.write((char*)buf, frame->data_len);

}
void MainWindow::leStartRecordButton_slot()
{
    ui->leKeyTextEdit->setText("0x1234ffaadd980037ef56bac5");  //just for test

    if(ui->leButtonText->text().isEmpty())
    {
        QMessageBox::warning(this,"Warning","Please choose a Button or input a Button name\n");
        ui->leButtonText->setFocus();
        return;
    }

    return ; //just for test

    if(!serial.isOpen())
    {
        QMessageBox::warning(this,"Port warning","Please Open Serial Port First!\n");
        return;
    }
    else
    {
        serial.setBaudRate(QSerialPort::Baud115200);
        serial.setParity(QSerialPort::NoParity);
        serial.setDataBits(QSerialPort::Data8);
        serial.setStopBits(QSerialPort::OneStop);
        serial.setFlowControl(QSerialPort::NoFlowControl);

        serial.clearError();
        serial.clear();
        connect(&serial, SIGNAL(readyRead()), this, SLOT(leReadyReadSlot()));
    }
}
void MainWindow::leReadyReadSlot()
{
    QByteArray arr = serial.readAll();
    //do_something(arr);
}
void MainWindow::leAddToListButton_slot()
{

    QString str = "1,";
    str.append(ui->leButtonText->text());
    str.append(",");
    str.append(ui->leKeyTextEdit->text());

    QListWidgetItem *item = new QListWidgetItem(str,ui->leKeymaplistWidget);
    ui->leKeymaplistWidget->addItem(item);
    //qDebug() << "add:leKeymaplistWidget total count is " << ui->leKeymaplistWidget->count();
}

void MainWindow::leClearButton_slot()
{
    ui->leKeymaplistWidget->clear();
    /*
     * insertItem is not working
    QString str = "1,";
    str.append(ui->leButtonText->text());
    str.append(",");
    str.append(ui->leKeyTextEdit->text());
    //qDebug() << "str is " << str;
    QListWidgetItem *item = new QListWidgetItem(str,ui->leKeymaplistWidget);
    qDebug() << "currentRow is " << ui->leKeymaplistWidget->currentRow();
    ui->leKeymaplistWidget->insertItem(ui->leKeymaplistWidget->currentRow(),item);
    //ui->leKeymaplistWidget->insertItem(1,item);
    */
}
void MainWindow::leRemoveFromListButton_slot()
{
    QList <QListWidgetItem*> items ;//注意 items是个Qlist 其中的元素是QListWidgetItem
    items = ui->leKeymaplistWidget->selectedItems();
    if(items.size()==0)
        return;
    else
    {
        for(int i =0; i<items.size(); i++)//遍历所有选中的ITEM
        {
            QListWidgetItem *sel = items[i];
            int r = ui->leKeymaplistWidget->row(sel);
            delete  ui->leKeymaplistWidget->takeItem(r);

        }
        //下面代码可实现删除单选的item
        //    QListWidgetItem *item = ui->SPList->takeItem(ui->SPList->currentRow());
        //    delete item;
    }

}
void MainWindow::leSaveKeymapButton_slot()
{
    QDir *dir = new QDir(keyMapDirPath);
    dir->setCurrent(keyMapDirPath);
    QString filename = ui->leCustomerText->text().append("_").append(ui->leDeviceText->text()).append("_byLearning").append(".txt");
    QFile *keymapfile = new QFile;
    //QFile *tempFile = new QFile;
    keymapfile->setFileName(filename);
    QTextStream out(keymapfile);
    if(keymapfile->exists())
    {
        //文件已存在,追加到文件末尾
        qDebug() << "文件已存在\n";
        if(!keymapfile->open(QIODevice::WriteOnly | QIODevice::Text|QIODevice::Append))
        {
            qDebug() << "打开文件失败\n";
            return ;
        }

    }
    else
    {
        //文件不存在,创建新文件
        qDebug() << "文件不存在,新建文件 " << filename << "\n";

        if(!keymapfile->open(QIODevice::WriteOnly | QIODevice::Text))
        {
            qDebug() << "打开文件失败\n";
            return ;
        }
        //QTextStream out(keymapfile);
        out << ui->leCustomerText->text() << "\n";
        out << ui->leDeviceText->text() << "\n";
    }
    qDebug() << "save:leKeymaplistWidget total count is " << ui->leKeymaplistWidget->count();
    for(int i = 0;i < ui->leKeymaplistWidget->count();i++)
    {
       QListWidgetItem *item = ui->leKeymaplistWidget->item(i);
       qDebug() << " item.text in row " << i << "is" << item->text();
       out << item->text() << "\n";
    }
    keymapfile->close();

}

/*---------------------------------------------------*/
